import cv2
import serial
import time

# Inicializa la cámara
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)

# Conexión serial con el ESP32
ser = serial.Serial('COM4', 9600)
time.sleep(2)

def detectar_paredes(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 60, 255, cv2.THRESH_BINARY_INV)

    h, w = thresh.shape
    secciones = {
        "izquierda": thresh[0:h//2, 0:w//3],
        "frente": thresh[0:h//2, w//3:2*w//3],
        "derecha": thresh[0:h//2, 2*w//3:]
    }

    resultado = {}
    for clave, zona in secciones.items():
        porcentaje = (cv2.countNonZero(zona) / zona.size) * 100
        resultado[clave] = porcentaje > 20

    return resultado

def enviar_comando(letra):
    ser.write(letra.encode())
    print("→ Enviado:", letra)

modo_escapando = False
tiempo_retroceso = 0.7

while True:
    ret, frame = cap.read()
    if not ret:
        break

    deteccion = detectar_paredes(frame)
    frente = deteccion["frente"]
    izquierda = deteccion["izquierda"]
    derecha = deteccion["derecha"]

    if frente and izquierda and derecha and not modo_escapando:
        # Entramos en modo de retroceso
        enviar_comando('B')
        modo_escapando = True
        time.sleep(tiempo_retroceso)
        continue  # saltamos para volver a leer una nueva imagen

    if modo_escapando:
        # Luego del retroceso, volvemos a analizar
        ret, frame = cap.read()
        if not ret:
            continue
        deteccion = detectar_paredes(frame)
        izquierda = deteccion["izquierda"]
        derecha = deteccion["derecha"]

        if not izquierda:
            enviar_comando('L')
        elif not derecha:
            enviar_comando('R')
        else:
            enviar_comando('C')  # centrar servo si ambos lados cerrados
        modo_escapando = False
        continue

    # Comportamiento normal
    if frente and derecha:
        enviar_comando('L')
    elif frente and izquierda:
        enviar_comando('R')
    elif frente:
        enviar_comando('R')
    else:
        enviar_comando('A')

    cv2.imshow("Vista", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
